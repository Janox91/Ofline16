#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Servidor Simple para Control de Vigilancia
Permite usar la aplicaci√≥n offline sin necesidad de Node.js
"""

import http.server
import socketserver
import webbrowser
import os
import sys
from pathlib import Path

def main():
    # Configuraci√≥n
    PORT = 8080
    DIRECTORY = os.getcwd()
    
    print("=" * 50)
    print("    SERVIDOR SIMPLE - CONTROL VIGILANCIA")
    print("=" * 50)
    print()
    
    # Verificar archivos necesarios
    required_files = ['index.html', 'app.js', 'styles.css', 'manifest.json']
    missing_files = []
    
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        print("‚ùå ERROR: Faltan archivos necesarios:")
        for file in missing_files:
            print(f"   - {file}")
        print()
        print("Aseg√∫rate de estar en la carpeta correcta del proyecto.")
        input("Presiona Enter para salir...")
        return
    
    print("‚úÖ Archivos verificados correctamente")
    print()
    
    # Cambiar al directorio del script
    os.chdir(DIRECTORY)
    
    # Crear servidor
    class MyHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
        def end_headers(self):
            # Agregar headers para PWA
            self.send_header('Cache-Control', 'no-cache, no-store, must-revalidate')
            self.send_header('Pragma', 'no-cache')
            self.send_header('Expires', '0')
            super().end_headers()
        
        def log_message(self, format, *args):
            # Log personalizado
            print(f"[{self.log_date_time_string()}] {format % args}")
    
    try:
        with socketserver.TCPServer(("", PORT), MyHTTPRequestHandler) as httpd:
            print(f"üöÄ Servidor iniciado en puerto {PORT}")
            print(f"üìÅ Directorio: {DIRECTORY}")
            print()
            print("üåê URLs disponibles:")
            print(f"   Local: http://localhost:{PORT}")
            print(f"   Red: http://[tu-ip]:{PORT}")
            print()
            print("üì± Para usar en m√≥vil:")
            print("   1. Conecta tu m√≥vil a la misma WiFi")
            print("   2. Ve a http://[ip-computadora]:8080")
            print("   3. Instala como PWA")
            print()
            print("üí° Para obtener tu IP, ejecuta 'ipconfig' en otra terminal")
            print()
            print("‚èπÔ∏è  Presiona Ctrl+C para detener el servidor")
            print("=" * 50)
            
            # Abrir navegador autom√°ticamente
            try:
                webbrowser.open(f'http://localhost:{PORT}')
                print("üåê Navegador abierto autom√°ticamente")
            except:
                print("‚ö†Ô∏è  No se pudo abrir el navegador autom√°ticamente")
            
            print()
            
            # Mantener servidor corriendo
            httpd.serve_forever()
            
    except KeyboardInterrupt:
        print()
        print("‚èπÔ∏è  Servidor detenido por el usuario")
        print("¬°Gracias por usar Control de Vigilancia!")
        
    except OSError as e:
        if e.errno == 48:  # Puerto en uso
            print(f"‚ùå ERROR: El puerto {PORT} est√° en uso")
            print("Intenta con otro puerto o cierra la aplicaci√≥n que lo usa")
        else:
            print(f"‚ùå ERROR: {e}")
        
        input("Presiona Enter para salir...")

if __name__ == "__main__":
    main() 